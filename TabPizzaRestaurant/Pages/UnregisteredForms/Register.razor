@layout LoginLayout
@page "/register"

@using Models
@using TabPizzaRestaurant.Data

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject Repository.Services.AccountManagmentService managmentService

<style>
    button{
        margin-top:2px;
    }
    div{
        margin:1px;
    }
    h3{
        margin-bottom:1%;
        
    }
    hr{
        width:400px;

    }
    button{
        margin:auto;
    }
    .outer_container{
        display:flex;
        flex-direction:row;
        justify-content:center;
    }
    .flex-container_login{
      margin-right:2%;
    
    }
    .flex-container_addres{
      margin-left:2%;
    }
</style>
<center>
    <h3 class="display-4">Rejestracja</h3>
</center>
<hr class="my-3" />
<EditForm Model="@newClient" OnValidSubmit="@ValidateUser">
    <div class="box-shadow">
        <div class="outer_container">
            <div class ="flex-container_login">
                <div>E-Mail: <br />   <InputText id="Email" @bind-Value="newClient.EMail"/></div>
                <br />
                <div>Login: <br />    <InputText id="Login" @bind-Value="newClient.Login"/></div>
                <br />
                <div>Hasło:<br />  <InputText id="Password" @bind-Value="newClient.Password"/></div>
                <br />
                <center>
                    <button type="submit" class="btn btn-primary">Zarejestruj się</button>
                </center>
             </div>
             <div class ="flex-container_addres">
                <div>Imię: <br />     <InputText id="firstName" @bind-Value="newClient.Name"/></div>
                <br />
                <div>Nazwisko:<br />   <InputText id="secondName" @bind-Value="newClient.Surname"/></div>
                <br />
                <div>Telefon: <br />    <InputText id="Phone" @bind-Value="newClient.PhoneNumber"/></div>
                <br />
                <div>Adres zamieszkania:<br />  <InputText id="Address" style="width:220px;" @bind-Value="newClient.Address"/></div>
                <br />
            </div>
        </div>
    </div>
    <DataAnnotationsValidator/>
    <ValidationSummary/>  
</EditForm>

@if(isException)
{
    <center> 
        <hr>
        <h3 style="color:rgb(255,51,51)">Błędne dane!</h3> 
    </center>
    <p>@error</p>
}

@code 
{
    // private User user;
    private ClientFront newClient;
    private string error;
    private bool isException = false;

    protected override Task OnInitializedAsync()
    {
        //user = new User();
        newClient = new ClientFront();
        return base.OnInitializedAsync();
    }

    private async Task<bool> ValidateUser()
    {
        try
        {
            isException = false;
            newClient.Role = "Client";
            var AccountAndClient = await managmentService.AddNewClient(newClient.EMail, newClient.Login, newClient.Password,
                                        newClient.Name, newClient.Surname, DateTime.Today, newClient.PhoneNumber, 0, newClient.Address, newClient.Role);

            ((CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(newClient);
            NavigationManager.NavigateTo("/");

            await sessionStorage.SetItemAsStringAsync("email", newClient.EMail);
            await sessionStorage.SetItemAsStringAsync("name", newClient.Name);
            await sessionStorage.SetItemAsStringAsync("surname", newClient.Surname);
            await sessionStorage.SetItemAsStringAsync("login", newClient.Login);
            await sessionStorage.SetItemAsStringAsync("password", newClient.Password);
            await sessionStorage.SetItemAsStringAsync("phone", newClient.Name);
            await sessionStorage.SetItemAsStringAsync("address", newClient.Address);
            await sessionStorage.SetItemAsStringAsync("role", newClient.Role);
            await sessionStorage.SetItemAsStringAsync("account_id", AccountAndClient.Item1.IdAccount.ToString());
            await sessionStorage.SetItemAsStringAsync("points", AccountAndClient.Item2.Points.ToString());
            newClient = new ClientFront();

            return await Task.FromResult(true);
        }
        catch (Exception e)
        {
            error = e.ToString();
            isException = true;
            return await Task.FromResult(false);
        }
    }
}