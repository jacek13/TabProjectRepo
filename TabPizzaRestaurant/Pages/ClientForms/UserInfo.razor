@page "/client/info"


@inject NavigationManager NavigationManager
@inject Repository.Services.PizzaService Storage
@inject Repository.Services.ClientService clientService
@inject Repository.Services.AccountManagmentService accountManagementService
@inject Repository.Services.AccountService accountService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
<h3>Dane konta</h3>
<hr>


@if (accountFront is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="flex-item2">
        <h3></h3>
        <EditForm Model="@accountFront" OnValidSubmit="@updateAccountData">
            <div>
                <div class="box-shadow">
        <div class="outer_container">
                <div class="row">
                    <div class="flex-md-column pr-3 mx-auto"><p>E-Mail:</p>      <InputText id="EMail" @bind-Value="accountFront.EMail" /></div>
                    <div class="flex-md-column mx-auto"><p>Imię:</p>   <InputText id="Name" @bind-Value="accountFront.Name" /></div>
                </div>
                <br />

                <div class="row">
                    <div class="flex-md-column pr-3 mx-auto"><p>Login:</p>     <InputText id="Login" @bind-Value="accountFront.Login" /></div>
                    <div class="flex-md-column mx-auto"><p>Nazwisko:</p>     <InputText id="Surname" @bind-Value="accountFront.Surname" /></div>
                </div>

                <br />
                <div class="row">
                    <div class="flex-md-column pr-3 mx-auto"><p>Hasło:</p>  <InputText id="Password" @bind-Value="accountFront.Password" /></div>
                    <div class="flex-md-column mx-auto"><p>Telefon:</p>     <InputText id="PhoneNumber" @bind-Value="accountFront.PhoneNumber" /></div>
                </div>
                <br />

                <div class="row">
                    <div class="flex-md-column pr-3 mx-auto"><p>Adres:</p>  <InputText id="Address" @bind-Value="clientFrontDataUpdate.Address" /></div>
                    <div class="flex-md-column pr-3 mx-auto"><p>Punkty:</p> <p> @clientFrontDataUpdate.Points</p>  </div>
                    <br />
                    </div>
                    </div>
                    </div>
            </div>

            <DataAnnotationsValidator />
            <ValidationSummary />

            <br />
            <center>
            <button type="submit" class="btn btn-primary mb-2">Zaktualizuj dane</button>
            </center>
            
        </EditForm>
    </div>

}

@if (wasException)
{
    <center>
        <hr>
        <p style="color:rgb(255,51,51)">@error</p>
    </center>
}

@code
{
    private Models.AccountFront accountFront;
    private Models.ClientFrontDataUpdate clientFrontDataUpdate;
    private string error;
    private bool wasException;

    protected override async Task OnParametersSetAsync()
    {
        wasException = false;
        try
        {
            await initAccountData();
        }
        catch (Exception e)
        {
            error = e.Message;
            wasException = true;
        }
    }

    private async Task initAccountData()
    {
        var dbUser = await accountService.GetAccountByLoginAndPassword(await sessionStorage.GetItemAsStringAsync("email"), 
            await sessionStorage.GetItemAsStringAsync("password"));
        accountFront = new Models.AccountFront()
            {
                IdAccount = dbUser.IdAccount,
                EMail = dbUser.EMail,
                Login = dbUser.Login,
                Password = dbUser.Password,
                Name = dbUser.Name,
                Surname = dbUser.Surname,
                PhoneNumber = dbUser.PhoneNumber,
                Role = dbUser.Role,
                AccountCreationDate = dbUser.AccountCreationDate
            };

        var clientData = await clientService.GetClientByAccountId(accountFront.IdAccount);
        clientFrontDataUpdate = new Models.ClientFrontDataUpdate()
            {
                IdClient = clientData.IdClient,
                Address = clientData.Address,
                Points = clientData.Points,
                AccountIdAccount = clientData.AccountIdAccount
            };


    }

    private async void updateAccountData()
    {
        try
        {

            var accountId = await sessionStorage.GetItemAsStringAsync("account_id");


            var tmp = await accountManagementService.UpdateAccountAndClient(accountFront.IdAccount,
                accountFront.EMail, accountFront.Login,
            accountFront.Password, accountFront.Name, accountFront.Surname, accountFront.AccountCreationDate,
            accountFront.PhoneNumber, clientFrontDataUpdate.Points, clientFrontDataUpdate.Address, accountFront.Role,
            clientFrontDataUpdate.IdClient);

            await sessionStorage.SetItemAsStringAsync("email", accountFront.EMail);
            await sessionStorage.SetItemAsStringAsync("name", accountFront.Name);
            await sessionStorage.SetItemAsStringAsync("surname", accountFront.Surname);
            await sessionStorage.SetItemAsStringAsync("login", accountFront.Login);
            await sessionStorage.SetItemAsStringAsync("password", accountFront.Password);
            await sessionStorage.SetItemAsStringAsync("phone", accountFront.PhoneNumber);
            await sessionStorage.SetItemAsStringAsync("address", clientFrontDataUpdate.Address);
            await sessionStorage.SetItemAsStringAsync("role", accountFront.Role);
            await sessionStorage.SetItemAsStringAsync("account_id", accountFront.IdAccount.ToString());
            await sessionStorage.SetItemAsStringAsync("points", clientFrontDataUpdate.Points.ToString());

            System.Diagnostics.Debug.WriteLine("updateAccountData end");

            NavigationManager.NavigateTo("/client/info");
            System.Diagnostics.Debug.WriteLine("updateAccountData the very end");
        }
        catch (Exception e)
        {
            System.Diagnostics.Debug.WriteLine("updateAccountData exception");
            wasException = true;
            error = e.Message;
            this.StateHasChanged();
        }
    }

}
