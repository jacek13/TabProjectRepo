@page "/client/statistics"
<center>
<h2 class="my-4">Twoje historyczne zamówienia</h2>
</center>

@using DataBaseAccess.Models
@using TabPizzaRestaurant.Models

@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject Repository.Services.ClientService clientService
@inject Repository.Services.OrderManagmentService orderManagmentService
@inject Repository.Services.PizzaService pizzaService

@if(historicalOrders is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <center>
        @if(historicalOrders.Count > 0)
        {
            <h3>Łącznie wydałeś u nas: @calculateOverallPrice() @currencyType</h3>
            <hr>
            <h4>Wybierz datę</h4>
            <EditForm Model="@forValidation" OnSubmit="@refresh">
                    <InputSelect id="date" @bind-Value="forValidation.Date">
                        @foreach (var date in dates)
                        {
                            <option value="@date">@date.ToString()</option>
                        }
                    </InputSelect>
                <button type="submit" class="btn btn-primary">Pokaż</button>
            </EditForm>
            <hr>
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Data zamówienia</th>
                        <th>Adres dostawy</th>
                        <th>Status</th>
                        <th>Kwota</th>
                        <th>Szczegóły</th>
                    </tr>
                </thead>
                <tbody>
                @foreach(var historicalOrder in historicalOrders)
                {
                    if (@DateOnly.Parse(@historicalOrder.Item1.Date.ToShortDateString()) == @selectedDay)
                    {
                        <tr>
                            <th>@historicalOrder.Item1.Date.ToShortDateString()</th>
                            <th>@historicalOrder.Item1.DeliveryAdress</th>
                            <th>@historicalOrder.Item1.Status</th>
                            <th>@calculatePrice(@historicalOrder.Item2)</th>
                            <th>
                                <table class="table table-striped">
                                    <thead>
                                        <tr>
                                            <th>Danie</th>
                                            <th>Ilość</th>
                                            <th>Cena za sztukę</th>
                                        </tr>
                                    </thead>
                                    @foreach (var dish in @historicalOrder.Item2)
                                    {
                                        <tr>
                                            <th>@getPizzaName(@dish.PizzaIdPizza)</th>
                                            <th>@dish.Amount</th>
                                            <th>@dish.HistoricalPrice</th>
                                        </tr>
                                    }
                                </table>
                            </th>
                        </tr>
                    }
                }
                </tbody>
            </table>
        }
        else
        {
            <h4>Twoja historia zamówień jest pusta.</h4>
            <br />
            <a class="custom-class text-center col-6 col-md-1 themed-grid-col" href="/">Serdecznie zapraszamy do zamówienia pierwszej pizzy!</a>
        }
    </center>
}

@if(wasException)
{
    <center> 
        <hr>
        <p style="color:rgb(255,51,51)">@error</p>
    </center>   
}

@code 
{
    private List<(Order, List<Dishes>)> historicalOrders;
    private bool wasException = false;
    private string error;
    private string currencyType;
    private Client client;
    private List<Pizza> menu;
    private List<DateOnly> dates;
    private DateOnly selectedDay;
    private DateFormFront forValidation = new DateFormFront(); //TODO

    protected override async Task OnParametersSetAsync()
    {
        wasException = false;
        currencyType = "ZŁ";
        try
        {
            var accountId = await sessionStorage.GetItemAsStringAsync("account_id");
            client = await clientService.GetClientByAccountId(Int32.Parse(accountId));
            menu = await pizzaService.GetMenu();
            historicalOrders = await orderManagmentService.GetAllClientOrdersAndDishes(client.IdClient);
            //historicalOrders.Sort((a) => a.Item.CompareTo(calculatePrice(a.Item2)); // TODO sortowanie rosnącą/malejąco
            //var tmp = historicalOrders.OrderByDescending(a => calculatePrice(a.Item2));
            initDays();
            selectedDay = DateOnly.FromDateTime(DateTime.Now);
        }
        catch(Exception e)
        {
            error = e.Message;
            wasException = true;
        }
    }

    private int calculatePrice(List<Dishes> dishes)
    {
        int sum = 0;
        foreach(var dish in dishes)
        {
            if(dish.Amount != null && dish.HistoricalPrice != null)
                sum += dish.Amount.GetValueOrDefault() * dish.HistoricalPrice.GetValueOrDefault();
        }
        return sum;
    }

    private int calculateOverallPrice()
    {
        int sum = 0;
        if(historicalOrders != null)
        {
            foreach (var historicalOrder in historicalOrders)
                sum += this.calculatePrice(historicalOrder.Item2);
        }
        return sum;
    }

    private void initDays()
    {
        if(historicalOrders != null)
        {
            dates = new List<DateOnly>();
            foreach (var historicalOrder in historicalOrders)
                if (!dates.Contains(DateOnly.Parse(historicalOrder.Item1.Date.ToShortDateString())))
                    dates.Add(DateOnly.Parse(historicalOrder.Item1.Date.ToShortDateString()));
        }
    }

    private string getPizzaName(int pizzaId)
    {
        var pizzaType = menu.FirstOrDefault(p => p.IdPizza == pizzaId);
        if (pizzaType != null)
            return pizzaType.Type;
        else
            return "ERROR: pizza not found!";
    }

    private void refresh()
    {
        selectedDay = forValidation.Date;
        this.StateHasChanged();
    }

    private class DateFormFront
    {
        public DateOnly Date { get; set; }
    }
}